#!/bin/bash

alias rm='rm -i'
# alias rmf='rm -f'
# alias rmr='rm -ir'
# alias rmrf='rm -rf'
alias cp='cp -i'
# alias cpr='cp -ir'
# alias cpf='cp -f'
# alias cprf='cp -rf'
alias mv='mv -i'
# alias mvf='mv -f'

# color=auto
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'
alias diff='diff --color=auto'

# change directory
alias ccd='cd ..'
alias cccd='cd ../..'
alias ccccd='cd ../../..'
alias cdd='cd $OLDPWD'

# lsd or exa or ls
if hash lsd 2> /dev/null; then
    alias l='lsd --group-dirs first -- '
    alias ls='lsd -F --group-dirs first -- '
    alias la='lsd -aF --group-dirs first -- '
    alias ll='lsd -lF --group-dirs first -- '
    alias lla='lsd -alF --group-dirs first -- '
    alias lt='lsd --tree -F --group-dirs first -- '
    alias lta='lsd --tree -aF --group-dirs first -- '
elif hash exa 2>/dev/null; then
    alias l='exa --group-directories-first'
    alias ls='exa -F --group-directories-first'
    alias la='exa -aF --group-directories-first'
    alias ll='exa -lgF --group-directories-first'
    alias lla='exa -algF --group-directories-first'
    alias lt='exa -TF --group-directories-first'
    alias lta='exa -TFa --group-directories-first'
elif hash gls 2> /dev/null; then
    alias l='gls --color=auto --group-directories-first'
    alias ls='gls --color=auto --group-directories-first'
    alias la='gls --color=auto --group-directories-first -AF'
    alias ll='gls --color=auto --group-directories-first -lF'
    alias lla='gls --color=auto --group-directories-first -AlF'
    alias lh='gls --color=auto --group-directories-first -AlhF'
else
    alias l='ls --color=auto --group-directories-first'
    alias ls='ls --color=auto --group-directories-first'
    alias la='ls --color=auto --group-directories-first -AF'
    alias ll='ls --color=auto --group-directories-first -lF'
    alias lla='ls --color=auto --group-directories-first -AlF'
    alias lh='ls --color=auto --group-directories-first -AlhF'
fi

# neovim or vim
if hash nvim 2>/dev/null; then
    alias vi=nvim
    alias vim=nvim
    alias nvi=nvim

    # alias nvis="nvim -S Session.vim"
    # alias vis="nvim -S Session.vim"

    alias snvi="sudo -E nvim"
    alias svi="sudo -E nvim"
elif hash vim 2>/dev/null; then
    alias vi=vim
    # alias vis="vim -S Session.vim"

    alias svi="sudo -E vim"
fi

# systemctl
alias sctl='sudo systemctl'
alias usctl='systemctl --user'
alias jctl='sudo journalctl'
alias bctl=bluetoothctl

# Docker
if groups | grep -qw docker; then
    alias dk="docker"
    alias dc="docker compose"
    alias ds="docker service"
    alias dst="docker stack"
    alias dsw="docker swarm"
else
    alias dk="sudo -E docker"
    alias dc="sudo -E docker compose"
    alias ds="sudo -E docker service"
    alias dst="sudo -E docker stack"
    alias dsw="sudo -E docker swarm"
fi

# dockviz
alias dockviz="docker run -it --rm -v /var/run/docker.sock:/var/run/docker.sock nate/dockviz"

# rustdoc
# rd() {
#     cargo doc
#     PORT=${*:-8080}
#     BASENAME=$(basename "$PWD")
#     if ! docker ps | grep $BASENAME-doc > /dev/null; then
#         docker run \
#             --rm -itd \
#             -p $PORT:8080 \
#             -v $PWD/target/doc:/tmp \
#             --name $BASENAME-doc \
#             svenstaro/miniserve:alpine /tmp
#     fi
#     xdg-open http://localhost:$PORT/$(echo $BASENAME | sed -e 's/-/_/g')/index.html || true
# }

# pcmanfm
# alias p.='pcmanfm . &'

# zathura
# za() {
#     zathura $* &
# }

# arch package managers
# alias ya=yay
# alias pc="sudo pacman"

# vscode
# alias c.='code . &'

# micro
# alias mi=micro

# amp
# alias am=amp

# hangul-misstypings
alias ㅊㅇ=cd
alias ㅣㄴ=ls

# git
alias gdhh='git diff HEAD^ HEAD'
# function git_current_branch {
#     git branch | grep \* | cut -d ' ' -f2
# }

# alias gdo='git diff origin/$(git_current_branch)'
# alias gpsup='git push -u origin $(git_current_branch)'
# alias gc!!='git commit -v --amend --no-verify'
# alias gca!!='git commit -v -a --amend --no-verify'
# alias gp!!='git push --force-with-lease --no-verify'
# alias grh1='git reset HEAD~1'
# alias grhs='git reset --soft'
# alias grhs1='git reset --soft HEAD~1'
# alias grhsd='git reset --soft HEAD'
# alias gsm='git switch master'
# alias grbo='git rebase origin/$(git_current_branch)'
# alias grbu='git rebase upstream/$(git_current_branch)'
# alias grbum='git rebase upstream/master'
# alias grbud='git rebase upstream/develop'
# alias grbim='git rebase -i master'
# alias grbium='git rebase -i upstream/master'

# python
alias py=python
alias pyvenv="pyenv virtualenv"

# kubernetes
alias k=kubectl
alias ktx=kubectx
alias ktc="kubectx -c"
alias kns=kubens

# etc
COMMIT_PROMPT="Make a commit for this change. Do not use 'git add' because files are already staged. Follow the 'Conventional Commit' format."
REVIEW_PROMPT='Read the staged git diff from this project and let me know your review. Also check for the possible issue. You can use file reading tools.'
if hash aichat 2>/dev/null; then
    alias aic="aichat"
    export AICHAT_CONFIG_DIR=$HOME/.config/aichat
    export AICHAT_CONFIG_FILE=$HOME/.config/aichat/config.yaml

    function aimc() {
        local out_cmd=$(aichat -f '`git diff --cached`' -r %shell% "These are staged code differences. $COMMIT_PROMPT" $@)
        # ask user to confirm
        out_cmd="${out_cmd//<think>*<\/think>/}"
        out_cmd=$(sed 's/^[ \t]*//; s/[ \t]*$//; /^$/d' <<< "$out_cmd")
        echo -e "$out_cmd\n\n"

        select yn in "Yes" "No"; do
            case $yn in
                Yes ) eval "$out_cmd"; break;;
                * ) break;;
            esac
        done
    }

    function aimck() {
        aimc 'Also, write commit message in Korean' $@
    }
fi

if hash codex 2>/dev/null; then
    function comc() {
        local prompt="Read the staged git diff from this project. Then, $COMMIT_PROMPT $@"
        codex "$prompt"
    }

    function comck() {
        local prompt="Also, write commit message in Korean. $@"
        comc "$prompt"
    }

    function corv() {
        local prompt="$REVIEW_PROMPT $@"
        codex "$prompt"
    }
fi

if hash gemini 2>/dev/null; then
    function gemc() {
        local prompt="Read the staged git diff from this project. Then, $COMMIT_PROMPT $@"
        gemini -p "$prompt"
    }

    function gemck() {
        local prompt="Also, write commit message in Korean. $@"
        gemc "$prompt"
    }

    function gerv() {
        local prompt="$REVIEW_PROMPT $@"
        gemini -p "$prompt"
    }
fi

if hash claude 2>/dev/null; then
    function clmc() {
        local prompt="Read the staged git diff from this project. Then, $COMMIT_PROMPT $@"
        claude "$prompt"
    }

    function clmck() {
        local prompt="Also, write commit message in Korean. $@"
        clmc "$prompt"
    }

    function clrv() {
        local prompt="$REVIEW_PROMPT $@"
        claude "$prompt"
    }
fi

if hash opencode 2>/dev/null; then
    function ocmc() {
        local prompt="Read the staged git diff from this project. Then, $COMMIT_PROMPT $@"
        opencode run "$prompt"
    }
    function ocmck() {
        local prompt="Also, write commit message in Korean. $@"
        ocmc "$prompt"
    }
    function ocrv() {
        local prompt="$REVIEW_PROMPT $@"
        opencode run "$prompt"
    }
fi

function rgd() {
    rg --json "$@" | delta
}

function run-parallel() {
    MAX_JOBS=${MAX_JOBS:-6}

    while [ $(jobs -r | wc -l) -ge $MAX_JOBS ]; do
        sleep 1
    done

    $@ &
}
