#
# Defines environment variables.
#

setopt auto_cd histignorealldups sharehistory

# TIME FMT
export TIMEFMT=$'\n================\nCPU\t%P\nuser\t%*U\nsystem\t%*S\ntotal\t%*E'

# ssh forward agent
if test -e "$(readlink -f $HOME/.ssh/ssh_auth_sock)" ; then
    export SSH_AUTH_SOCK="$HOME/.ssh/ssh_auth_sock"
elif ! test "$SSH_AUTH_SOCK" ; then
    export SSH_AUTH_SOCK="${XDG_RUNTIME_DIR}/ssh-agent.socket"
fi

#
# Browser
#

if [[ "$OSTYPE" == darwin* ]]; then
  export BROWSER='open'
fi

#
# Editors
#

if (( $+commands[nvim] )); then
    export EDITOR=nvim
    export VISUAL='nvim'
else
    export EDITOR=vim
    export VISUAL='vim'
fi

export PAGER='less'

#
# Language
#

if [[ -z "$LANG" ]]; then
  export LANG='en_US.UTF-8'
fi

# Fix broken, wrong LC variables (e.g. kitty)
if [[ "$LC_CTYPE" == "UTF-8" ]]; then
  export LC_CTYPE='en_US.UTF-8'
fi

#
# Paths
#

typeset -gU cdpath fpath mailpath path

# [For Mac M1 USERS]
# Homebrew: /opt/homebrew/bin must precede /usr/local/bin.
# Please update /etc/paths: add `/opt/homebrew/bin` manually.

# Set the the list of directories that cd searches.
# cdpath=(
#   $cdpath
# )

# Set the list of directories that Zsh searches for programs.
# see ~/.zprofile as well
path=(
  $path
  /usr/local/{bin,sbin}
  /usr/{bin,sbin}
  /{bin,sbin}
)

# Let ~/.local/bin take precedence
if ! (( ${path[(I)$HOME/.local/bin]} )); then
  path=( $HOME/.local/bin $path )
fi

# dotfiles-populated bin.
if [ -d $HOME/.dotfiles/bin/ ]; then
  path=( $path $HOME/.dotfiles/bin )
fi

### >>> External Programs >>>
# pyenv settings
if [ -d ~/.pyenv ]; then
    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"
fi

if [ -d ~/.pyenv/plugins/pyenv-virtualenv/ ]; then
    export PYENV_VIRTUALENV_DISABLE_PROMPT=1
fi

# >>> conda setup >>>

# Cleanup some anaconda environment variables to avoid messing up in tmux, etc.
# (these environment variables might be copied and inherited unwantedly)
unset CONDA_EXE
unset CONDA_PREFIX
unset CONDA_DEFAULT_ENV
unset CONDA_PYTHON_EXE
unset CONDA_SHLVL

# Miniconda3
if [ -d "$HOME/.miniconda3/bin/" ]; then
  path=( $path "$HOME/.miniconda3/bin" )
  export CONDA_EXE="$HOME/.miniconda3/bin/conda"
elif [ -d "$HOME/miniconda3/bin/" ]; then
  path=( $path "$HOME/miniconda3/bin/" )
  export CONDA_EXE="$HOME/miniconda3/bin/conda"
elif [ -d "/usr/local/miniconda3/" ]; then
  path=( $path "/usr/local/miniconda3/bin" )
  export CONDA_EXE="/usr/local/miniconda3/bin/conda"
fi

# Anaconda3 (deprecated, should prefer miniconda3)
if [ -d $HOME/.anaconda3/bin/ ]; then
  path=( $path $HOME/.anaconda3/bin )
  if [[ "$CONDA_EXE" != *"miniconda"* ]]; then
    export CONDA_EXE=$HOME/.anaconda3/bin/conda
  fi
fi

function _conda_initialize() {
if [ -n "${CONDA_EXE}" ]; then
  ${CONDA_EXE} config --set auto_activate_base false
  __conda_setup="$(${CONDA_EXE} 'shell.zsh' 'hook' 2> /dev/null)"
  if [ $? -eq 0 ]; then
      eval "$__conda_setup"
  fi
  unset __conda_setup
fi
}
# Note: conda initialize is slow (0.3 sec), so execute lazily
conda() {
  unfunction conda
  _conda_initialize
  conda "$@"
}

# <<< conda setup <<<

# rye settings
if [ -d "$HOME/.rye" ]; then
    source "$HOME/.rye/env"
fi

# rbenv settings
if [ -d ~/.rbenv/bin ]; then
  export PATH="$HOME/.rbenv/bin:$PATH"
  eval "$(rbenv init -)"
fi

# nodenv settings
if [ -d ~/.nodenv/bin ]; then
  export PATH="$HOME/.nodenv/bin:$PATH"
  eval "$(nodenv init -)"
fi

# scala setting (coursier install dir)
if [ -d ~/.local/share/coursier/bin ]; then
    export PATH="$PATH:/home/ryul99/.local/share/coursier/bin"
fi

# fzf setting
if [ -f ~/.fzf.zsh ]; then
    export PATH="$PATH:$HOME/.fzf/bin"
    source ~/.fzf.zsh
fi

# cargo
if [ -d ~/.cargo/bin ]; then
    export PATH="$HOME/.cargo/bin:$PATH"
fi

# npm global
if [ -d ~/.npm-global/bin ]; then
    export PATH="$HOME/.npm-global/bin:$PATH"
fi

# perl
if [ -d ~/perl5/bin ]; then
    export PATH="$HOME/perl5/bin:$PATH"
    export PERL5LIB="$HOME/perl5/lib/perl5:$PERL5LIB"
    export PERL_LOCAL_LIB_ROOT="$HOME/perl5:$PERL_LOCAL_LIB_ROOT"
    export PERL_MB_OPT="--install_base \"$HOME/perl5\"";
    export PERL_MM_OPT="INSTALL_BASE=$HOME/perl5";
fi

# ruby
if which ruby >/dev/null && which gem >/dev/null; then
    export GEM_HOME=$HOME/.gem
    export GEM_PATH=$HOME/.gem
fi

# opencode
if [ -d /home/ryul99/.opencode/bin ]; then
  export PATH=/home/ryul99/.opencode/bin:$PATH
fi

### <<< End of External Programs <<<

# rust (cargo)
if [ -d $HOME/.cargo/bin/ ]; then
  path=( $path $HOME/.cargo/bin )
fi
if [ -f "$HOME/.cargo/env" ]; then
  source "$HOME/.cargo/env"
fi


#
# Less
#

# Set the default Less options.
# Mouse-wheel scrolling has been disabled by -X (disable screen clearing).
# Remove -X and -F (exit if the content fits on one screen) to enable it.
export LESS='-F -g -i -M -R -S -w -X -z-4'

# Set the Less input preprocessor.
if (( $+commands[lesspipe.sh] )); then
  export LESSOPEN='| /usr/bin/env lesspipe.sh %s 2>&-'
fi

#
# Temporary Files
#

if [[ -d "$TMPDIR" ]]; then
  export TMPPREFIX="${TMPDIR%/}/zsh"
  if [[ ! -d "$TMPPREFIX" ]]; then
    mkdir -p "$TMPPREFIX"
  fi
fi


#
# Add custom config directory for Prezto.
#  (note that this line is executed before initialization of prezto.)
#
fpath=(${ZDOTDIR:-$HOME}/.zsh/prezto-themes ~/.local/share/zsh/site-functions $fpath)


#
# Python - Virtualenv, etc.
#

if [[ "$(uname)" == "Darwin" ]]; then
    # Mac OS X: use python shipped by Homebrew for virtualenv.
    export VIRTUALENVWRAPPER_PYTHON='/usr/local/bin/python'
else
    # use default system python for virtualenv.
    export VIRTUALENVWRAPPER_PYTHON='/usr/bin/python'
fi

# Set the directory where virtual environments are stored.
export WORKON_HOME="$HOME/.virtualenvs"
export VIRTUAL_ENV_DISABLE_PROMPT=1

# ensure that all new virtual environments are isolated from the system site-packages.
# (--no-site-packages has been removed since virtualenv >= 20, which has been the default option)
# export VIRTUALENVWRAPPER_VIRTUALENV_ARGS='--no-site-packages'

# python startup
# export PYTHONSTARTUP=$HOME/.pythonrc.py


# Disable dot files in archive
export COPYFILE_DISABLE=true

# aliases
if [ -f ~/.sh_aliases ]; then
    source ~/.sh_aliases
fi

if [ -f ~/.zsh_aliases ]; then
    source ~/.zsh_aliases
fi

if [ -f "$HOME/.zshenv.local" ]; then
  source "$HOME/.zshenv.local"
fi
